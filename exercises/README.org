* Exercises

Problems are put here to help people find something to exercise with. 

In addition to these problems, I felt myself like adding more problems that I found somewhere else. 
Particularly, refer to ~resources~ in the main README.org file. 
In addition to those, you may also find some exercises from the Euler project, which are more math oriented. 

* 99 Problems for Haskell
    This section containes all of the ninety nine problems listed in https://wiki.haskell.org/H-99:_Ninety-Nine_Haskell_Problems. 
    Original authors should be referenciated, I'm only re-distributing this. 

** Lists I 
    These problems are both fine for absolutely beginners as they are for beginners who are learning folding and mapping exercises. 
    In fact, feel free to resolve them however you wish. 
    1. Find the last element of a list.
    2. Find the last but one element of a list.
    3. Find the K'th element of a list. The first element in the list is number 1.
    4. Find the number of elements of a list.
    5. Reverse a list.
    6. Find out whether a list is a palindrome. A palindrome can be read forward or backward.
    7. Flatten a nested list structure. (E.g. Make ~[[1, 2], [1, 2, 3]] = [1, 2, 1, 2, 3]~)
    8. Eliminate consecutive duplicates of list elements.
    9. Pack consecutive duplicates of list elements into sublists. If a list contains repeated elements they should be placed in separate sublists.
    10. Run-length encoding of a list. Use the result of problem P09 to implement the so-called run-length encoding data compression method. 
        Consecutive duplicates of elements are encoded as lists (N E) where N is the number of duplicates of the element E.

** Lists II 
    11. Modify the result of problem 10 in such a way that if an element has no duplicates it is simply copied into the result list. 
    Only elements with duplicates are transferred as (N E) lists.
    12. Decode a run-length encoded list of exercise 10.
    13. 
    14. Duplicate the elements of a list.
    15. Replicate the elements of a list a given number of times (similarly to duplicate).
    16. Drop every N'th element from a list.
    17. Split a list into two parts; the length of the first part is given.
    18. Extract a slice from a list. In other words, given two indices, find the sublist between those two.
    19. Rotate a list N places to the left. E.g. ~[1, 2, 3, 4] -> [4, 1, 2, 3]~
    20. Remove the K'th element from a list.

** Lists III, Random
    21. Insert an element at a given position into a list.
    22. Create a list containing all integers within a given range.
    23. Extract a given number of randomly selected elements from a list.
    24. Draw N different random numbers from the set 1..M.
    25. Generate a random permutation of the elements of a list.
    26. Generate the combinations of K distinct objects chosen from the N elements of a list.
    27. Group the elements of a set into disjoint subsets. E.g. ~[1, 2, 1] [1, 2, 3, 4] -> [[1], [2, 3], [4]]~
    28. Sorting a list of lists according to length of sublists.
    29. 


